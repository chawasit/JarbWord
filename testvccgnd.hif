HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	clockdivider.v
	{
		clockdivider [] [t_ff.v]
		{
			9 [] [];
		}
	}
	t_ff.v
	{
		D_FF [] []
		{
			11 [] [];
		}
		t_ff [] []
		{
			10 [] [];
		}
	}
	userbuffer.v
	{
		userbuffer [] []
		{
			12 [] [];
		}
	}
	answercheck.v
	{
		answercheck [] []
		{
			1 [] [];
		}
	}
	readybox.v
	{
		readybox [] [];
	}
	statebox.v
	{
		statebox [] []
		{
			3 [] [];
		}
	}
	extractbox.v
	{
		extractbox [] []
		{
			2 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_REPRESENTATION=UNSIGNED,LPM_DIRECTION=ADD,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000S,STYLE=NORMAL] [DATAA2,DATAA1,DATAA0,DATAB2,DATAB1,DATAB0,RESULT0,RESULT1,RESULT2];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=3,CONSTANT_CIN=1,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000S] [cin,datab0,datab1,datab2,dataa0,dataa1,dataa2,result0,result1,result2];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=1,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000S] [cin,datab0,datab1,datab2,dataa0,dataa1,dataa2,result0,result1,result2,result3];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=3,DEPTH=0] [data0,data1,data2,result0,result1,result2];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
		}
	}
	testvccgnd.gdf
	{
		testvccgnd [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	testvccgnd::(0,0):(0): testvccgnd.gdf
	{
		userbuffer::(0,0):(80): userbuffer.v;
		userbuffer::(0,0):(79): userbuffer.v;
		userbuffer::(0,0):(78): userbuffer.v;
		userbuffer::(0,0):(77): userbuffer.v;
		readybox::(0,0):(75): readybox.v;
		clockdivider::(0,0):(69): clockdivider.v
		{
			t_ff:10:(6,0):(3,clkDiv1): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(7,0):(4,clkDiv2): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(8,0):(5,clkDiv3): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(9,0):(6,clkDiv4): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(10,0):(7,clkDiv5): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(11,0):(8,clkDiv6): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(12,0):(9,clkDiv7): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(13,0):(10,clkDiv8): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(14,0):(11,clkDiv9): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
		}
		clockdivider::(0,0):(67): clockdivider.v;
		clockdivider::(0,0):(66): clockdivider.v
		{
			t_ff:10:(6,0):(3,clkDiv1): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(7,0):(4,clkDiv2): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(8,0):(5,clkDiv3): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(9,0):(6,clkDiv4): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(10,0):(7,clkDiv5): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(11,0):(8,clkDiv6): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(12,0):(9,clkDiv7): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(13,0):(10,clkDiv8): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
			t_ff:10:(14,0):(11,clkDiv9): t_ff.v
			{
				d_ff:11:(6,0):(6,d1): t_ff.v;
			}
		}
		statebox::(0,0):(60): statebox.v
		{
			lpm_add_sub:4:(25,0):(123): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(43,adder): addcore.tdf
				{
					addcore:6:(178,10):(40,adder0): addcore.tdf;
				}
				altshift:7:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(28,0):(124): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(43,adder): addcore.tdf
				{
					addcore:6:(178,10):(40,adder0): addcore.tdf;
				}
				altshift:7:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(30,0):(125): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(43,adder): addcore.tdf
				{
					addcore:6:(178,10):(40,adder0): addcore.tdf;
				}
				altshift:7:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		t_ff::(0,0):(59): t_ff.v;
		clockdivider::(0,0):(58): clockdivider.v;
		clockdivider::(0,0):(57): clockdivider.v;
		clockdivider::(0,0):(37): clockdivider.v;
		clockdivider::(0,0):(36): clockdivider.v;
		t_ff::(0,0):(35): t_ff.v;
		userbuffer::(0,0):(18): userbuffer.v;
		userbuffer::(0,0):(20): userbuffer.v;
		answercheck::(0,0):(21): answercheck.v;
		answercheck::(0,0):(22): answercheck.v;
		readybox::(0,0):(23): readybox.v;
		statebox::(0,0):(28): statebox.v;
		extractbox::(0,0):(30): extractbox.v;
	}
}
